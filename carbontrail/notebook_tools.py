import matplotlib
import matplotlib.pyplot as plt
import numpy as np

def preview(dataframe, head=5):
    display(dataframe.head(head))
    print("This dataframe has " + str(len(dataframe)) + " rows.")

def profile_fuel_burn(profile):
    '''Accepts a flight profile generated by the profile_generator function and returns the total fuel burnt during
    the mission in kg.'''
    temp = profile.copy()
    temp["timedelta"] = -temp.time.diff(periods=-1)
    trip_fuel = round((temp.timedelta*temp.fuel).sum(),3) #[kg]
    return trip_fuel #[kg]

# # Profile Viewer

def profile_viewer(profile,x_lim=(),show_phases=True,secondary_profiles=[],labels=None,figsize=(15,12.5)):
    '''
    x_lim can either except a axis range in the form of a tuple or a flight phase in the form of a string'''
    print('Fuel burn: {:,.0f} kg'.format(profile_fuel_burn(profile)))
    if not isinstance(secondary_profiles,list):
        secondary_profiles = [secondary_profiles]
    if labels == None:
        labels = list(np.arange(len(secondary_profiles)+1))
    with plt.style.context('seaborn'):
        if type(x_lim)==str:
            next_phase = profile.phase.unique()[np.where(profile.phase.unique()==x_lim)[0][0]+1]
            x_lim = (profile.loc[profile.phase==x_lim,'time'].iloc[0],
                     profile.loc[profile.phase==next_phase,'time'].iloc[0])
        fig,ax = plt.subplots(nrows=3,ncols=2,figsize=figsize)
        for prof,label in zip([profile]+secondary_profiles,labels):
            ax[0,0].plot(prof.time,prof.altitude,label=label)
            ax[1,0].plot(prof.time,prof.vtas,label=label)
            ax[2,0].step(prof.time,prof.drag/1000,where='post',label=label)
            ax[0,1].step(prof.time,prof.thrust/1000,where='post',label=label)
            ax[2,1].plot(prof.time,prof.mass,label=label)
            ax[1,1].step(prof.time,prof.fuel,where='post',label=label)
        if len(secondary_profiles)>0:
            ax[0,0].legend()
            for pnum,p in enumerate(secondary_profiles):
                print('Fuel burn (secondary profile #{}): {:,.0f} kg'.format(pnum+1,profile_fuel_burn(p)))
        ax[0,0].title.set_text('Altitude [ft]')
        ax[1,0].title.set_text('True Airspeed [kts]')
        ax[2,0].title.set_text('Drag [kN]')
        ax[2,0].set_xlabel('Time [min]',fontsize=15)
        ax[0,1].title.set_text('Thrust [kN]')
        ax[1,1].title.set_text('Fuel Consumption [kg/min]')
        ax[2,1].title.set_text('Aircraft Mass [kg]')
        ax[2,1].set_xlabel('Time [min]',fontsize=15)

        axes = {'altitude':ax[0,0],'vtas':ax[1,0],'temperature':ax[2,0],
                'thrust':ax[0,1],'fuel':ax[1,1],'mass':ax[2,1]}
        colors = ['#ff7f0e','#55A868', '#C44E52', '#8172B2', '#CCB974', '#64B5CD','#e377c2','#ff7f0e']
        for series,axis in axes.items():
            axis.title.set_fontsize(15)
            axis.tick_params(axis='both',labelsize=12)
            if len(x_lim)>0:
                axis.set_xlim(x_lim)
                axis.autoscale(enable=True,axis='y')
            else:
                axis.set_xlim(profile.time.min(),profile.time.max())
            phases = profile.phase.unique()
            if show_phases:
                for i in np.arange(profile.phase.nunique()):
                    axis.axvspan(xmin=profile.loc[profile.phase==phases[i],'time'].iloc[0],
                                 xmax=(profile.loc[profile.phase==phases[i+1],'time'].iloc[0] if 
                                       i<profile.phase.nunique()-1 else profile.time.max()),
                                 alpha=0.25,color=colors[i])

        if show_phases:
            custom_lines = []
            for i,phase in enumerate(profile.phase.unique()):
                    custom_lines.append(matplotlib.lines.Line2D([0],[0],color=colors[i],alpha=.5,lw=10))
            fig.legend(custom_lines,profile.phase.unique(),loc='lower center',bbox_to_anchor=(0.5,0),ncol=8,fontsize=15);
        plt.tight_layout(h_pad=3,rect=[0,0.04,1,1])

def display_flight_track(flight,preview_flight=False,apply_filter=False,figsize=(20,5)):
    if apply_filter:
        flight = duplicate_filter(flight)
    fig = plt.figure(figsize=figsize)
    ax1 = fig.add_subplot(131,projection='3d')
    ax1.plot(xs=flight.lon,ys=flight.lat,zs=flight.alt_geom)
    ax2 = fig.add_subplot(132)
    ax2.plot(flight.postime,flight.alt_geom,label='Geometric')
    ax2.plot(flight.postime,flight.alt_baro,label='Barometric')
    ax2.legend()
    ax2.set_title('Altitude [ft]')
    ax3 = fig.add_subplot(133)
    ax3.plot(flight.postime,flight.gs,label='Ground speed')
    ax3.plot(flight.postime,flight.tas,label='True air-speed')
    ax3.plot(flight.postime,flight.ias,label='Indicated air-speed')
    ax3.legend()
    ax3.set_title('Speed [kts]')
    if preview_flight:
        preview(flight)

def track_profile_viewer(flight,track_profile,figsize=(30,15)):
    fig = plt.figure(figsize=figsize)
    ax1 = fig.add_subplot(311)
    ax1.plot(flight.postime,flight.alt_geom,c='k',alpha=0.5,label='Geometric altitude (raw)');
    ax1.scatter(flight.postime,flight.alt_baro,c='C0',s=5,alpha=0.5,label='Barometric altitude(raw)');
    ax1.plot(track_profile.postime,track_profile.alt_baro_filtered,c='C0',label='Barometric (filtered)');
    ax1b = plt.twinx(ax1)
    ax1b.scatter(flight.postime,flight.baro_rate,c='C2',s=5,alpha=0.5,label='Barometric ROCD (raw)');
    ax1b.plot(track_profile.postime,track_profile.baro_rate_derived,c='C2',label='Derived barometric ROCD\n(from filtered baro altitude)');
    ax1.legend(loc='upper left')
    ax1b.legend(loc='upper right')
    ax1.set_title('<--Altitude [ft] & ROCD [ft/min]-->')

    ax2 = fig.add_subplot(312)
    ax2.plot(flight.postime,flight.gs,c='k',alpha=0.5,label='Ground speed (raw)')
    ax2.scatter(flight.postime,flight.tas,c='C0',s=5,alpha=0.5,label='TAS (raw)')
    ax2.plot(track_profile.postime,track_profile.tas_filtered,c='C0',label='TAS (filtered)')
    ax2b = plt.twinx(ax2)
    ax2b.plot(track_profile.postime,track_profile.atas_ms2_derived,c='C2',label='Derived acceleration\n(from filtered TAS)',);
    ax2.legend(loc='upper left')
    ax2b.legend(loc='upper right')
    ax2.set_title('<--Speed [kts] & Acceleration [ms2]-->')

    ax3 = fig.add_subplot(313)
    ax3.plot(track_profile.postime,track_profile.thrust/1e3,label='Thrust');
    ax3.plot(track_profile.postime,track_profile.drag/1e3,label='Drag');
    ax3b = plt.twinx(ax3)#fig.add_subplot(224)
    ax3b.plot(track_profile.postime,track_profile.fuel,c='C2',label='Fuel flow rate');

    ax3.legend(loc='upper left');
    ax3b.legend(loc='upper right');
    ax3.set_title('<--Forces [kN] & Fuel flow [kg/min]-->');